# If one property is set in more than one application-<profile>.properties, the last from list is used

#### SPRING PROPERTIES ####
# Database set-up
spring.datasource.driverClassName=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/openkoda
spring.datasource.username=postgres
spring.datasource.password=postgres

spring.jpa.hibernate.ddl-auto=none

spring.jpa.properties.hibernate.format_sql=false
spring.jpa.properties.hibernate.show_sql=false

spring.jpa.properties.hibernate.ejb.interceptor.session_scoped=com.openkoda.core.audit.PropertyChangeInterceptor
spring.jpa.properties.hibernate.id.new_generator_mappings=true
spring.jpa.properties.hibernate.session_factory.statement_inspector=com.openkoda.core.helper.SqlCommentStatementInspector
spring.jpa.properties.hibernate.order_by.default_null_ordering=last
#spring.jpa.properties.hibernate.dialect=com.openkoda.core.customisation.CustomPostgreSQLDialect

spring.main.allow-bean-definition-overriding=true
spring.main.allow-circular-references=true

spring.jackson.serialization.write_dates_as_timestamps=false
spring.web.locale=en_US
logging.level.com.openkoda=DEBUG
logging.level.com.openkoda.core.audit=INFO


####
# SMTP SENDER
####
spring.mail.host=
spring.mail.port=
spring.mail.username=
spring.mail.password=
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true


spring.servlet.multipart.max-file-size = 5MB
spring.servlet.multipart.max-request-size = 5MB

#in case of migration to Spring 2, use these:
#spring.servlet.multipart.max-file-size = 5MB
#spring.servlet.multipart.max-request-size = 5MB

spring.mvc.async.request-timeout=14400000
spring.messages.basename=messages,messages-attribute,messages-integration

#server.port=8080

####
#### OPENKODA PROPERTIES ####
####

#### Database
upgrade.db.file=/migration/core_upgrade.sql
upgrade.db.current=SELECT v.major, v.minor, v.build, v.revision, v.done, v.note, (v.major * 10000000 + v.minor * 100000 + v.build * 100 + v.revision) AS "version_numeric" \
                   FROM db_version v  \
                   WHERE v.done = true \
                   ORDER BY version_numeric DESC \
                   LIMIT 1

#upgrade.db.installed=SELECT v.major, v.minor, v.build, v.revision, v.done, v.note, (v.major * 10000000 + v.minor * 100000 + v.build * 100 + v.revision) AS "version_numeric" \
#		                 FROM db_version v  \
#		                 WHERE v.done = true \
#		                 ORDER BY version_numeric ASC \
#		                 LIMIT 1
		                 
upgrade.db.insert=INSERT INTO public.db_version \
                  (id, created_by, created_by_id, created_on, modified_by, modified_by_id, updated_on,  major, minor, build, revision, done,note) \
                  VALUES(nextval('seq_global_id'), '', 0, CURRENT_TIMESTAMP, '', 0, CURRENT_TIMESTAMP, ?, ?, ?, ?, ?, ?);

####

server.maxHttpHeaderSize=32768
server.servlet.session.timeout=120m

# Default admin account
application.admin.email=admin@yourdomain.org
init.admin.username=admin
init.admin.password=admin123

# Root url
base.url=http://localhost:8080
# Application name
application.name=Openkoda
# Application logo path
application.logo=/vendor/openkoda/openkoda_logo.svg
application.icon=/vendor/openkoda/openkoda_icon.png
# Description shown in emails
#application.description=A low-code framework for SaaS products
# Organization logo path
#logo.image.href=/html/organization/%s/dashboard
# Global logo path
#logo.image.href.global=/html/organization/all


# Path to font
#font.path=/fonts/arialuni.ttf

# INTEGRATIONS

#attribute.webhook.slack=slack_webhook
#attribute.webhook.ms-teams=ms_teams_webhook
attribute.email=email

# jira integration
#api.jira.oauth.authorize=https://auth.atlassian.com/authorize?audience=api.atlassian.com&client_id=%s&scope=%s&redirect_uri=%s&state=%s&response_type=code&prompt=consent
#api.jira.authorize.token=https://auth.atlassian.com/oauth/token
#api.jira.refresh.token=https://auth.atlassian.com/oauth/token
#api.jira.access.scope=write:jira-work read:jira-work offline_access
#api.jira.get.cloudId=https://api.atlassian.com/oauth/token/accessible-resources
#api.jira.get.project.list=https://api.atlassian.com/ex/jira/%s/rest/api/2/project
#api.jira.get.issue.type.list=https://api.atlassian.com/ex/jira/%s/rest/api/2/issuetype
#api.jira.create.issue=https://api.atlassian.com/ex/jira/%s/rest/api/2/issue

# github integration
#api.github.oauth.authorize=https://github.com/login/oauth/authorize?scope=%s&client_id=%s&redirect_uri=%s
#api.github.authorize.token=https://github.com/login/oauth/access_token
#api.github.create.issue=https://api.github.com/repos/%s/%s/issues
#api.github.access.scope=repo

# trello integration
#api.trello.get.boards=https://api.trello.com/1/members/me/boards
#api.trello.get.lists=https://api.trello.com/1/boards/
#api.trello.create.board=https://api.trello.com/1/boards/
#api.trello.create.list=https://api.trello.com/1/lists
#api.trello.create.card=https://api.trello.com/1/cards

#basecamp integration
#api.basecamp.oauth.authorize=https://launchpad.37signals.com/authorization/new?type=web_server&client_id=%s&redirect_uri=%s&state=%s
#api.basecamp.authorize.token=https://launchpad.37signals.com/authorization/token?type=web_server&client_id=%s&redirect_uri=%s&client_secret=%s&code=%s
#api.basecamp.refresh.token=https://launchpad.37signals.com/authorization/token?type=refresh&refresh_token=%s&client_id=%s&redirect_uri=%s&client_secret=%s
#api.basecamp.post.message=https://3.basecampapi.com/%s/buckets/%s/todolists/%s/todos.json


# Tables create/update
#spring.jpa.hibernate.ddl-auto=update

# HTML location and layout
#default.layout=main

#default view for '/' page.
#default.pages.homeview=home

# Redirection after user actions
# After authorization
#page.after.auth=/html/organization/all
# After authorization for multiple organizations
#page.after.auth.for.multiple.organizations=/html/organization/all
# After authorization for one organization
#page.after.auth.for.one.organization=/html/organization/%s/settings
# After registration
#page.after.register=/logout
# After logging out
#page.after.logout=/home
# After password change
#page.after.password.change=
# After password recovery
#page.after.password.recovery=

# ROLE NAMES
#role.global.user=ROLE_USER
#role.org.admin=ROLE_ORG_ADMIN

# Length of password for newly invited user
#user.initial.password.length=15

# BACKUP

# Backup file directory path
#backup.file.directory=
# Backup file date pattern
#backup.date.pattern=yyyyMMdd-HHmm
# Backup application properties file path
#backup.application.properties=

#backup.gpg.key.name=
#backup.gpg.key.file=

#backup.options=BACKUP_DATABASE,BACKUP_PROPERTIES
#backup.scp.host=
#backup.scp.target=

#backup.scp.executable=scp
#backup.pg_dump.executable=pg_dump
#backup.gpg.executable=gpg
#system.cat.executable=cat
#system.pidstat.executable=pidstat
#system.apt.executable=apt

login.sign-up.link=true
logging.level.org.springframework.security=DEBUG
# Authentication methods:
# Enable login and password authentication
#authentication.loginAndPassword=true

# Exclude user agent from logs
#user.agent.excluded.from.error.log=

# Requests to this subnet are passed to /html/local without authentication
#local.network=127.0.0.1/32
local.base.url=http://127.0.0.1:8080

# Front end resource configuration
# Always load from resources
#frontendresource.load.always.from.resources=true
# Create if it does not exist
#frontendresource.create.if.not.exist=false
# Default name for frontend resource page
#default.frontendResourcePage.template.name=frontend-resource-template

# RECAPTCHA
# you can get keys for local testing here: https://www.google.com/recaptcha/admin
#recaptcha.site-key=
#recaptcha.secret-key=
# Validation type
recaptcha.validation=none

# Mail configuration
#mail.from=
#mail.replyTo=

# Mailgun api data
#mailgun.apikey=
#mailgun.apiurl=

# refresher token duration 1 month 30 * 3600 * 24 = 2592000
#tokens.refresher.expiration=2592000

#show.message.key.for.default.field.label=false

# Available languages, split options with ','
language.options=en


# Enable secure cookies
#secure.cookie=true

#module.integration.github.client.id=
#module.integration.github.client.secret=
#module.integration.jira.client.id=
#module.integration.jira.client.secret=
#module.integration.basecamp.client.id=
#module.integration.basecamp.client.secret=

# Organization creation
#organization.creation.strategy=CREATE
#organization.creation.strategy.assign.id=121
#organization.creation.strategy.no.organization.users=false

#file.storage.type=database
#file.storage.filesystem.path=/tmp

components.export.zip.filename=components.zip

application.pages.public=/,/logout,/login*,/public/**,/vendor/**,/connect/**,/checkouts/**,/password/recovery/**,/register/verify,/resend/verification,/sitemap*,/general-sitemap*,/pages-sitemap*,/swagger-ui/**,/v3/**,/has-file-access,/file-asset*/**
application.pages.csrf-disabled=
application.websocket.allowed-origins=${base.url}
application.classes.privileges-enum=com.openkoda.model.Privilege
application.classes.event=com.openkoda.core.service.event.ApplicationEvent
chat.gpt.api.key=
chat.gpt.prompt.excludedFields=requiredReadPrivilege,requiredWritePrivilege,requiredPrivilege
chat.gpt.prompt.cacheFile=./gpt-cache.json
chat.gpt.prompt.cacheEnabled=true

request.feature.visible=true
request.feature.url=https://openkoda.com/request-a-feature?appname=${application.name}

dashboard.personalization.enabled=true


####
#### Performance related
####
# Set this always to true, as this may significantly impriove Hibernate query generation caching (but not data, just a query, AST)
#https://discourse.hibernate.org/t/optimizing-generated-sql-queries-when-using-parameters-of-type-list/4809
hibernate.query.in_clause_parameter_padding=true
spring.jpa.properties.hibernate.query.in_clause_parameter_padding=true
spring.thymeleaf.cache=false
####
