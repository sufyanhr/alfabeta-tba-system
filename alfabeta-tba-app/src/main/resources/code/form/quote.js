a => a.datalist("quoteStatuses", d => d.toLinkedMap(["DRAFT","SUBMITTED","UNDER REVIEW","APPROVED","DECLINED","BOUND","DATA REQUIRED"]))
	  .dropdown("quoteStatus","quoteStatuses")
	  .manyToOne("clientId","client").referenceDescriptionSource("coalesce(first_name,company_name)||' '||coalesce(last_name,'')")
      .number("age").sqlFormula("select EXTRACT(YEAR FROM AGE(NOW(), c.date_of_birth)) from dynamic_client c where c.id=client_id")
      .manyToOne("productId","product")
      .datalist("productTypes", b => b.toLinkedMap(["MOTO","PROPERTY"]))
	           .sectionWithDropdown("productType", "productTypes").additionalCss("productTypeSection")
	           .manyToOne("vehicleId","vehicle").referenceDescriptionSource("license_plate").additionalCss("productTypeSectionNode MOTO")
               .manyToOne("driverId","client").additionalCss("productTypeSectionNode MOTO")
               .manyToOne("propertyId","property").additionalCss("productTypeSectionNode PROPERTY")
	           .manyToOne("ownerId","clientId").additionalCss("productTypeSectionNode PROPERTY")  
      .manyToOne("coverageId","coverage").referenceDescriptionSource("coverage_name")   
      .datalist("riskscores", d => d.toLinkedMap(["A","B"]))
	           .sectionWithDropdown("riskScore1", "riskscores").additionalCss("risk1Section").additionalPrivileges("manageFinancial","manageFinancial")
	           .text("riskScore2").additionalCss("risk1SectionNode A").additionalPrivileges("manageFinancial","manageFinancial")
               .text("riskScore3").additionalCss("risk1SectionNode A").additionalPrivileges("manageFinancial","manageFinancial")
	           .radioList("riskScore4","riskscores").additionalCss("risk1SectionNode B").additionalPrivileges("manageFinancial","manageFinancial")
               .number("riskFactor1").additionalPrivileges("manageFinancial","manageFinancial")
               .number("riskFactor2").additionalPrivileges("manageFinancial","manageFinancial")
               .number("riskFactor3").additionalPrivileges("manageFinancial","manageFinancial")
               .number("riskFactor4").additionalPrivileges("manageFinancial","manageFinancial")
      .textarea("underwriterComments")
      .datalist("requiredDocuments", d => d.toLinkedMap(["Claims History Report","Financial Statements","Renovation and Repair Records","Proof of Ownership","Home Inspection Report","Vehicle Maintenance Records","Vehicle Inspection Report"]))
      .multiselect("requiredDocuments","requiredDocuments")
      .number("calculatedPremium").sqlFormula("select d.base_premium * risk_factor1 * risk_factor2 * risk_factor3 * risk_factor4 from dynamic_coverage d where d.id=coverage_id")
      .manyToOne("assignedTo","user").referenceDescriptionSource("coalesce(first_name,'')||' '||coalesce(last_name,'')")
      .files("filesId", (f,r) => r.getFileDtos(f.entity), "image/png,image/jpeg,application/pdf")
      